// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReduxHelpers should combine multiple reducer action types: combined fulfilled 1`] = `
{
  "ipsum": {},
  "loremIpsum": {
    "lorem-id": {
      "data": {
        "test": "test",
      },
      "date": undefined,
      "error": false,
      "errorMessage": "",
      "errorStatus": undefined,
      "fulfilled": true,
      "metaData": undefined,
      "metaId": "lorem-id",
      "metaQuery": undefined,
      "pending": false,
      "update": false,
    },
  },
}
`;

exports[`ReduxHelpers should combine multiple reducer action types: combined pending 1`] = `
{
  "ipsum": {},
  "loremIpsum": {
    "lorem-id": {
      "error": false,
      "errorMessage": "",
      "errorStatus": undefined,
      "fulfilled": false,
      "metaData": undefined,
      "metaId": "lorem-id",
      "metaQuery": undefined,
      "pending": true,
      "update": false,
    },
  },
}
`;

exports[`ReduxHelpers should combine multiple reducer action types: combined rejected 1`] = `
{
  "ipsum": {},
  "loremIpsum": {
    "lorem-id": {
      "error": true,
      "errorMessage": " Server is currently unable to handle this request.",
      "errorStatus": 0,
      "fulfilled": false,
      "metaData": undefined,
      "metaId": "lorem-id",
      "metaQuery": undefined,
      "pending": false,
      "update": false,
    },
  },
}
`;

exports[`ReduxHelpers should generate a standard reducer from promise actions: generatedPromiseActionReducer fulfilled 1`] = `
{
  "ipsum": {},
  "lorem": {
    "lorem-id": {
      "data": {
        "test": "test",
      },
      "date": undefined,
      "error": false,
      "errorMessage": "",
      "errorStatus": undefined,
      "fulfilled": true,
      "metaData": undefined,
      "metaId": "lorem-id",
      "metaQuery": undefined,
      "pending": false,
      "update": false,
    },
  },
}
`;

exports[`ReduxHelpers should generate a standard reducer from promise actions: generatedPromiseActionReducer fulfilled no meta data 1`] = `
{
  "ipsum": {},
  "lorem": {
    "data": {
      "test": "test",
    },
    "date": undefined,
    "error": false,
    "errorMessage": "",
    "errorStatus": undefined,
    "fulfilled": true,
    "metaData": undefined,
    "metaId": undefined,
    "metaQuery": undefined,
    "pending": false,
    "update": false,
  },
}
`;

exports[`ReduxHelpers should generate a standard reducer from promise actions: generatedPromiseActionReducer pending 1`] = `
{
  "ipsum": {},
  "lorem": {
    "lorem-id": {
      "error": false,
      "errorMessage": "",
      "errorStatus": undefined,
      "fulfilled": false,
      "metaData": undefined,
      "metaId": "lorem-id",
      "metaQuery": undefined,
      "pending": true,
      "update": false,
    },
  },
}
`;

exports[`ReduxHelpers should generate a standard reducer from promise actions: generatedPromiseActionReducer pending no meta data 1`] = `
{
  "ipsum": {},
  "lorem": {
    "error": false,
    "errorMessage": "",
    "errorStatus": undefined,
    "fulfilled": false,
    "metaData": undefined,
    "metaId": undefined,
    "metaQuery": undefined,
    "pending": true,
    "update": false,
  },
}
`;

exports[`ReduxHelpers should generate a standard reducer from promise actions: generatedPromiseActionReducer rejected 1`] = `
{
  "ipsum": {},
  "lorem": {
    "lorem-id": {
      "error": true,
      "errorMessage": " Server is currently unable to handle this request.",
      "errorStatus": 0,
      "fulfilled": false,
      "metaData": undefined,
      "metaId": "lorem-id",
      "metaQuery": undefined,
      "pending": false,
      "update": false,
    },
  },
}
`;

exports[`ReduxHelpers should generate a standard reducer from promise actions: generatedPromiseActionReducer rejected no meta data 1`] = `
{
  "ipsum": {},
  "lorem": {
    "error": true,
    "errorMessage": " Server is currently unable to handle this request.",
    "errorStatus": 0,
    "fulfilled": false,
    "metaData": undefined,
    "metaId": undefined,
    "metaQuery": undefined,
    "pending": false,
    "update": false,
  },
}
`;

exports[`ReduxHelpers should have specific functions: reduxHelpers 1`] = `
{
  "FULFILLED_ACTION": [Function],
  "PENDING_ACTION": [Function],
  "REJECTED_ACTION": [Function],
  "generatedPromiseActionReducer": [Function],
  "setStateProp": [Function],
}
`;

exports[`ReduxHelpers should update a state object: don't reset state object 1`] = `
{
  "ipsum": false,
  "lorem": true,
}
`;

exports[`ReduxHelpers should update a state object: reset state object 1`] = `
{
  "ipsum": true,
  "lorem": true,
}
`;
