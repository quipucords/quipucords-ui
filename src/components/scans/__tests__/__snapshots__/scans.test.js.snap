// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Scans Component should render a connected component with default props: connected 1`] = `<Connect(Scans) />`;

exports[`Scans Component should render a non-connected component error: error 1`] = `
<EmptyState
  className="quipucords-empty-state__alert"
>
  <Alert
    title="t(view.error, {\\"context\\":\\"scans\\"})"
    variant="danger"
  >
    t(view.error-message, {"context":"scans","message":null})
  </Alert>
</EmptyState>
`;

exports[`Scans Component should render a non-connected component pending: pending 1`] = `
<Modal
  aria-label={null}
  backdrop={false}
  className={null}
  disableFocusTrap={true}
  footer={null}
  header={null}
  isContentOnly={false}
  isOpen={true}
  position="top"
  positionOffset="5%"
  showClose={false}
  t={[Function]}
  variant="medium"
>
  <Spinner
    className="blank-slate-pf-icon"
    inline={false}
    inverse={false}
    loading={true}
    size="lg"
  />
  <div
    className="text-center"
  >
    t(view.loading, {"context":"scans"})
  </div>
</Modal>
`;

exports[`Scans Component should render a non-connected component with empty state: empty state 1`] = `<withRouter(Connect(ScansEmptyState)) />`;

exports[`Scans Component should render a non-connected component: non-connected 1`] = `
<div
  className="quipucords-view-container"
>
  <ViewToolbar
    actions={
      <div
        className="form-group"
      >
        <Tooltip
          content="Merge selected scan results into a single report"
          delayShow={500}
          id={null}
          isPopover={false}
          placement="top"
          rootClose={true}
          trigger={
            Array [
              "hover",
            ]
          }
        >
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            disabled={true}
            id="merge-reports"
            onClick={[Function]}
          >
            Merge reports
          </Button>
        </Tooltip>
      </div>
    }
    activeFilters={Array []}
    filterFields={
      Array [
        Object {
          "filterType": "text",
          "id": "search_by_name",
          "placeholder": "Filter by Name",
          "title": "Name",
        },
        Object {
          "filterType": "text",
          "id": "search_sources_by_name",
          "placeholder": "Filter by Source Name",
          "title": "Source",
        },
      ]
    }
    filterType={Object {}}
    filterValue=""
    itemsType="Scan"
    itemsTypePlural="Scans"
    lastRefresh={0}
    onRefresh={[Function]}
    selectedCount={0}
    selectedItems={Array []}
    sortAscending={true}
    sortFields={
      Array [
        Object {
          "id": "name",
          "isNumeric": false,
          "title": "Name",
        },
        Object {
          "id": "most_recent_scanjob__start_time",
          "isNumeric": true,
          "sortAscending": false,
          "title": "Most Recent",
        },
      ]
    }
    sortType={Object {}}
    totalCount={0}
    viewType="SCANS_VIEW"
  />
  <ViewPaginationRow
    currentPage={0}
    pageSize={0}
    selectedItems={Array []}
    totalCount={0}
    totalPages={0}
    viewType="SCANS_VIEW"
  />
  <div
    className="quipucords-list-container"
  >
    <ListView
      className="quipicords-list-view"
    >
      <Connect(ScanListItem)
        key="1"
        lastRefresh={0}
        scan={
          Object {
            "id": 1,
          }
        }
      />
    </ListView>
  </div>
</div>
`;
