// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ScanJobsList Component should render a connected component: connected 1`] = `
<Connect(ScanJobsList)
  id={1}
/>
`;

exports[`ScanJobsList Component should render a non-connected component error: error 1`] = `
<EmptyState
  className="quipucords-empty-state__alert"
>
  <Alert
    isInline={true}
    isPlain={true}
    title="t(view.error, {"context":"scan-jobs"})"
    variant="danger"
  >
    t(view.error-message, {"context":"scan-jobs","message":"Lorem Ipsum."})
  </Alert>
</EmptyState>
`;

exports[`ScanJobsList Component should render a non-connected component pending: pending 1`] = `
<EmptyState
  className="quipucords-empty-state"
  variant="large"
>
  <Spinner
    isSVG={true}
    size="sm"
  />
   
  t(view.loading)
</EmptyState>
`;

exports[`ScanJobsList Component should render a non-connected component: non-connected 1`] = `
<div
  className="quipucords-infinite-results"
>
  <div
    className="quipucords-infinite-list"
    onScroll={[Function]}
  >
    <Table
      ariaLabel={null}
      className="quipucords-table__scan-jobs"
      columnHeaders={[]}
      componentClassNames={
        {
          "table": "quipucords-table",
          "td": "quipucords-table__td",
          "tdAction": "quipucords-table__td-action",
          "tdExpand": "quipucords-table__td-expand",
          "tdExpanded": "quipucords-table__td-expand-expanded",
          "tdExpandedContent": "quipucords-table__td-expand-content",
          "tdExpandedWrapper": "quipucords-table__td-expand-wrapper",
          "tdSelect": "quipucords-table__td-select",
          "th": "quipucords-table__th",
          "tr": "quipucords-table__tr",
          "trExpand": "quipucords-table__tr-expand",
          "trExpanded": "quipucords-table__tr-expand-expanded",
          "trExpandedContent": "quipucords-table__tr-expand-content",
        }
      }
      isBorders={false}
      isHeader={false}
      isStriped={false}
      onExpand={null}
      onSelect={null}
      onSort={null}
      rows={
        [
          {
            "cells": [
              {
                "content": <React.Fragment>
                  <ContextIcon
                    size="sm"
                    symbol="success"
                  />
                   
                  t(table.label_status_completed, {"context":"scan"})
                </React.Fragment>,
                "dataLabel": "t(table.label_status, {"context":"scan"})",
              },
              {
                "content": <React.Fragment>
                  a day ago
                </React.Fragment>,
                "dataLabel": "t(table.label_status_time, {"context":"scan"})",
              },
              {
                "content": <React.Fragment>
                  <ContextIcon
                    color={
                      {
                        "name": "--pf-global--Color--dark-100",
                        "value": "#151515",
                        "var": "var(--pf-global--Color--dark-100)",
                      }
                    }
                    size="sm"
                    symbol="success"
                  />
                   
                  10
                </React.Fragment>,
                "dataLabel": "t(table.label_status, {"context":"success"})",
              },
              {
                "content": <React.Fragment>
                  <ContextIcon
                    color={
                      {
                        "name": "--pf-global--Color--dark-100",
                        "value": "#151515",
                        "var": "var(--pf-global--Color--dark-100)",
                      }
                    }
                    size="sm"
                    symbol="failed"
                  />
                   
                  10
                </React.Fragment>,
                "dataLabel": "t(table.label_status, {"context":"failed"})",
              },
              {
                "content": <React.Fragment>
                  <ScanDownload
                    icon={
                      <ContextIcon
                        size="sm"
                        symbol="download"
                      />
                    }
                    job={
                      {
                        "endTime": "2019-05-03",
                        "id": 14,
                        "reportId": 15,
                        "startTime": "2019-05-03",
                        "status": "completed",
                        "systemsFailed": 10,
                        "systemsScanned": 10,
                      }
                    }
                    t={[Function]}
                    tooltip={null}
                    useOnScanAction={[Function]}
                    variant="link"
                  >
                    t(table.label_action_scan, {"context":"download"})
                  </ScanDownload>
                </React.Fragment>,
                "isActionCell": true,
                "style": {
                  "textAlign": "right",
                },
              },
            ],
          },
        ]
      }
      summary={null}
      variant="compact"
    />
  </div>
</div>
`;
