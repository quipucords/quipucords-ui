// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PageLayout Component should render a basic component branded: brand 1`] = `
<Masthead>
  <MastheadToggle>
    <PageToggleButton
      aria-label="Global navigation"
      variant="plain"
    >
      <BarsIcon
        color="currentColor"
        noVerticalAlign={false}
        size="sm"
      />
    </PageToggleButton>
  </MastheadToggle>
  <MastheadMain>
    <MastheadBrand>
      <Brand
        alt="t(view.brand-image-alt, {"name":"Quipucords"})"
      >
        <source
          srcSet="title-brand.svg"
        />
      </Brand>
    </MastheadBrand>
  </MastheadMain>
  <MastheadContent>
    <Toolbar
      id="toolbar"
      isFullHeight={true}
      isStatic={true}
    >
      <ToolbarContent
        isExpanded={false}
        showClearFiltersButton={false}
      >
        <ForwardRef
          alignment={
            {
              "default": "alignRight",
            }
          }
          spacer={
            {
              "default": "spacerNone",
              "md": "spacerMd",
            }
          }
          variant="icon-button-group"
        >
          <ForwardRef
            variant="icon-button-group"
            visibility={
              {
                "default": "hidden",
                "lg": "visible",
              }
            }
          >
            <ToolbarItem
              visibility={
                {
                  "default": "hidden",
                  "lg": "visible",
                  "md": "hidden",
                }
              }
            >
              <ApplicationLauncher
                aria-label="Application launcher"
                className=""
                direction="down"
                favorites={[]}
                favoritesLabel="Favorites"
                isDisabled={false}
                isGrouped={false}
                isOpen={false}
                items={
                  [
                    <ApplicationLauncherItem
                      onClick={[Function]}
                    >
                      t(view.label, {"context":"about"})
                    </ApplicationLauncherItem>,
                    <ApplicationLauncherItem
                      href="./docs/install.html"
                    >
                      t(view.label, {"context":"guides-install"})
                    </ApplicationLauncherItem>,
                    <ApplicationLauncherItem
                      href="./docs/use.html"
                    >
                      t(view.label, {"context":"guides-using"})
                    </ApplicationLauncherItem>,
                  ]
                }
                menuAppendTo="inline"
                onSelect={[Function]}
                onToggle={[Function]}
                position="right"
                removeFindDomNode={false}
                searchNoResultsText="No results found"
                searchPlaceholderText="Filter by name..."
                toggleIcon={
                  <QuestionCircleIcon
                    color="currentColor"
                    noVerticalAlign={false}
                    size="sm"
                  />
                }
              />
            </ToolbarItem>
          </ForwardRef>
          <ToolbarItem
            visibility={
              {
                "default": "visible",
                "lg": "hidden",
              }
            }
          >
            <Dropdown
              dropdownItems={
                [
                  <DropdownGroup>
                    <DropdownItem
                      onClick={[Function]}
                    >
                      t(view.label, {"context":"logout"})
                    </DropdownItem>
                  </DropdownGroup>,
                  <Divider />,
                  <DropdownItem
                    onClick={[Function]}
                  >
                    <CogIcon
                      color="currentColor"
                      noVerticalAlign={false}
                      size="sm"
                    />
                     
                    t(view.label, {"context":"about"})
                  </DropdownItem>,
                  <DropdownItem
                    href="./docs/install.html"
                  >
                    <HelpIcon
                      color="currentColor"
                      noVerticalAlign={false}
                      size="sm"
                    />
                     
                    t(view.label, {"context":"guides-install"})
                  </DropdownItem>,
                  <DropdownItem
                    href="./docs/use.html"
                  >
                    <HelpIcon
                      color="currentColor"
                      noVerticalAlign={false}
                      size="sm"
                    />
                     
                    t(view.label, {"context":"guides-using"})
                  </DropdownItem>,
                ]
              }
              isOpen={false}
              isPlain={true}
              onSelect={[Function]}
              position="right"
              toggle={
                <KebabToggle
                  onToggle={[Function]}
                />
              }
            />
          </ToolbarItem>
        </ForwardRef>
        <ToolbarItem
          visibility={
            {
              "default": "hidden",
              "lg": "visible",
            }
          }
        >
          <Dropdown
            dropdownItems={
              [
                <DropdownGroup>
                  <DropdownItem
                    onClick={[Function]}
                  >
                    t(view.label, {"context":"logout"})
                  </DropdownItem>
                </DropdownGroup>,
              ]
            }
            isFullHeight={true}
            isOpen={false}
            onSelect={[Function]}
            toggle={
              <DropdownToggle
                icon={
                  <Avatar
                    alt="Avatar"
                    src="avatarImg.svg"
                  />
                }
                onToggle={[Function]}
              >
                lorem
              </DropdownToggle>
            }
          />
        </ToolbarItem>
      </ToolbarContent>
    </Toolbar>
  </MastheadContent>
</Masthead>
`;

exports[`PageLayout Component should render a basic component: basic 1`] = `
<Page
  defaultManagedSidebarIsOpen={true}
  getBreakpoint={[Function]}
  getVerticalBreakpoint={[Function]}
  header={
    <Masthead>
      <MastheadToggle>
        <PageToggleButton
          aria-label="Global navigation"
          variant="plain"
        >
          <BarsIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        </PageToggleButton>
      </MastheadToggle>
      <MastheadMain>
        <MastheadBrand>
          <Brand
            alt="t(view.brand-image-alt, {"name":"Quipucords"})"
          >
            <source
              srcSet="title.svg"
            />
          </Brand>
        </MastheadBrand>
      </MastheadMain>
      <MastheadContent>
        <Toolbar
          id="toolbar"
          isFullHeight={true}
          isStatic={true}
        >
          <ToolbarContent
            isExpanded={false}
            showClearFiltersButton={false}
          >
            <ForwardRef
              alignment={
                {
                  "default": "alignRight",
                }
              }
              spacer={
                {
                  "default": "spacerNone",
                  "md": "spacerMd",
                }
              }
              variant="icon-button-group"
            >
              <ForwardRef
                variant="icon-button-group"
                visibility={
                  {
                    "default": "hidden",
                    "lg": "visible",
                  }
                }
              >
                <ToolbarItem
                  visibility={
                    {
                      "default": "hidden",
                      "lg": "visible",
                      "md": "hidden",
                    }
                  }
                >
                  <ApplicationLauncher
                    aria-label="Application launcher"
                    className=""
                    direction="down"
                    favorites={[]}
                    favoritesLabel="Favorites"
                    isDisabled={false}
                    isGrouped={false}
                    isOpen={false}
                    items={
                      [
                        <ApplicationLauncherItem
                          onClick={[Function]}
                        >
                          t(view.label, {"context":"about"})
                        </ApplicationLauncherItem>,
                        <ApplicationLauncherItem
                          href="./docs/install.html"
                        >
                          t(view.label, {"context":"guides-install"})
                        </ApplicationLauncherItem>,
                        <ApplicationLauncherItem
                          href="./docs/use.html"
                        >
                          t(view.label, {"context":"guides-using"})
                        </ApplicationLauncherItem>,
                      ]
                    }
                    menuAppendTo="inline"
                    onSelect={[Function]}
                    onToggle={[Function]}
                    position="right"
                    removeFindDomNode={false}
                    searchNoResultsText="No results found"
                    searchPlaceholderText="Filter by name..."
                    toggleIcon={
                      <QuestionCircleIcon
                        color="currentColor"
                        noVerticalAlign={false}
                        size="sm"
                      />
                    }
                  />
                </ToolbarItem>
              </ForwardRef>
              <ToolbarItem
                visibility={
                  {
                    "default": "visible",
                    "lg": "hidden",
                  }
                }
              >
                <Dropdown
                  dropdownItems={
                    [
                      <DropdownGroup>
                        <DropdownItem
                          onClick={[Function]}
                        >
                          t(view.label, {"context":"logout"})
                        </DropdownItem>
                      </DropdownGroup>,
                      <Divider />,
                      <DropdownItem
                        onClick={[Function]}
                      >
                        <CogIcon
                          color="currentColor"
                          noVerticalAlign={false}
                          size="sm"
                        />
                         
                        t(view.label, {"context":"about"})
                      </DropdownItem>,
                      <DropdownItem
                        href="./docs/install.html"
                      >
                        <HelpIcon
                          color="currentColor"
                          noVerticalAlign={false}
                          size="sm"
                        />
                         
                        t(view.label, {"context":"guides-install"})
                      </DropdownItem>,
                      <DropdownItem
                        href="./docs/use.html"
                      >
                        <HelpIcon
                          color="currentColor"
                          noVerticalAlign={false}
                          size="sm"
                        />
                         
                        t(view.label, {"context":"guides-using"})
                      </DropdownItem>,
                    ]
                  }
                  isOpen={false}
                  isPlain={true}
                  onSelect={[Function]}
                  position="right"
                  toggle={
                    <KebabToggle
                      onToggle={[Function]}
                    />
                  }
                />
              </ToolbarItem>
            </ForwardRef>
            <ToolbarItem
              visibility={
                {
                  "default": "hidden",
                  "lg": "visible",
                }
              }
            >
              <Dropdown
                dropdownItems={
                  [
                    <DropdownGroup>
                      <DropdownItem
                        onClick={[Function]}
                      >
                        t(view.label, {"context":"logout"})
                      </DropdownItem>
                    </DropdownGroup>,
                  ]
                }
                isFullHeight={true}
                isOpen={false}
                onSelect={[Function]}
                toggle={
                  <DropdownToggle
                    icon={
                      <Avatar
                        alt="Avatar"
                        src="avatarImg.svg"
                      />
                    }
                    onToggle={[Function]}
                  >
                    lorem
                  </DropdownToggle>
                }
              />
            </ToolbarItem>
          </ToolbarContent>
        </Toolbar>
      </MastheadContent>
    </Masthead>
  }
  isBreadcrumbWidthLimited={false}
  isManagedSidebar={true}
  isNotificationDrawerExpanded={false}
  mainContainerId="main-content"
  mainTabIndex={-1}
  onNotificationDrawerExpand={[Function]}
  onPageResize={[Function]}
  sidebar={
    <PageSidebar
      nav={
        <Nav
          onSelect={[Function]}
          onToggle={[Function]}
          ouiaSafe={true}
          theme="dark"
        >
          <NavList
            ariaLeftScroll="Scroll left"
            ariaRightScroll="Scroll right"
          >
            <NavItem
              className="quipucords-navItem"
              component={
                {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                }
              }
              icon={<Icon />}
              id="sources"
              isActive={false}
              onClick={[Function]}
              variant="link"
            >
              t(view.label, {"context":"sources"})
            </NavItem>
            <NavItem
              className="quipucords-navItem"
              component={
                {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                }
              }
              icon={<Icon />}
              id="scans"
              isActive={false}
              onClick={[Function]}
              variant="link"
            >
              t(view.label, {"context":"scans"})
            </NavItem>
            <NavItem
              className="quipucords-navItem"
              component={
                {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                }
              }
              icon={<Icon />}
              id="credentials"
              isActive={false}
              onClick={[Function]}
              variant="link"
            >
              t(view.label, {"context":"credentials"})
            </NavItem>
          </NavList>
        </Nav>
      }
    />
  }
  skipToContent={
    <SkipToContent
      href="#main-content"
      show={false}
    >
      t(view.label, {"context":"skip-nav"})
    </SkipToContent>
  }
>
  <span
    className="test"
  >
    lorem
  </span>
</Page>
`;
