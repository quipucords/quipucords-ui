// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ViewToolbar Component should handle displaying secondary components, fields: secondary 1`] = `
<Fragment>
  <Toolbar
    className="quipucords-toolbar"
    clearAllFilters={[Function]}
    clearFiltersButtonText="t(toolbar.label, {"context":"clear-filters"})"
    collapseListedFiltersBreakpoint="lg"
  >
    <ToolbarContent
      isExpanded={false}
      showClearFiltersButton={false}
    >
      <ToolbarToggleGroup
        breakpoint="lg"
        toggleIcon={
          <FilterIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        }
      >
        <ForwardRef
          variant="filter-group"
        >
          <ToolbarFilter
            categoryName="t(toolbar.label_option, {"context":"search_by_name"})"
            chips={[]}
            deleteChip={[Function]}
            key="search_by_name"
            showToolbarItem={true}
          >
            <SearchName />
          </ToolbarFilter>
        </ForwardRef>
      </ToolbarToggleGroup>
      <ToolbarItem
        key="groupSeparator"
        variant="separator"
      />
      <ToolbarItem
        key="sortFields"
        spacer={
          {
            "default": "spacerSm",
          }
        }
      >
        <ViewToolbarFieldSort
          t={[Function]}
          useOnSelect={[Function]}
          useView={[Function]}
        />
      </ToolbarItem>
      <ToolbarItem
        key="sortSeparator"
        variant="separator"
      />
      <ToolbarItem
        key="lastRefresh"
      >
        <RefreshTimeButton
          lastRefresh={0}
          onRefresh={[Function]}
          t={[Function]}
        />
      </ToolbarItem>
      <ToolbarItem
        alignment={
          {
            "lg": "alignRight",
            "md": "alignLeft",
          }
        }
        key="secondaryFields"
      >
        dolor sit
      </ToolbarItem>
    </ToolbarContent>
  </Toolbar>
  <Divider />
</Fragment>
`;

exports[`ViewToolbar Component should handle updating toolbar chips: chips 1`] = `
{
  "categoryName": "t(toolbar.label_option, {"context":"search_by_name"})",
  "children": <SearchName />,
  "chips": [
    "t(toolbar.label_chip, {"context":"lorem ipsum"})",
  ],
  "deleteChip": [Function],
  "showToolbarItem": true,
}
`;

exports[`ViewToolbar Component should hide categories when a single filter is available: single filter 1`] = `
<ViewToolbarTextInput
  debounceTimer={800}
  filter="search_by_name"
  t={[Function]}
  useOnClear={[Function]}
  useOnSubmit={[Function]}
  useSelector={[Function]}
  useView={[Function]}
>
  <InputGroup>
    <div
      className="pf-c-input-group"
    >
      <TextInput
        aria-label="t(toolbar.label_placeholder_filter, {"context":"search_by_name"})"
        className=""
        data-test="toolbarSearchName"
        id={null}
        isDisabled={false}
        isReadOnly={false}
        maxLength={255}
        name={null}
        onChange={[Function]}
        onClear={[Function]}
        onKeyUp={[Function]}
        onMouseUp={[Function]}
        placeholder="t(toolbar.label_placeholder_filter, {"context":"search_by_name"})"
        type="text"
        value={null}
      >
        <TextInput
          aria-label="t(toolbar.label_placeholder_filter, {"context":"search_by_name"})"
          className="quipucords-form__text-input "
          data-test="toolbarSearchName"
          id="generatedid-"
          isDisabled={false}
          isReadOnly={false}
          maxLength={255}
          name="generatedid-"
          onChange={[Function]}
          onKeyUp={[Function]}
          onMouseUp={[Function]}
          placeholder="t(toolbar.label_placeholder_filter, {"context":"search_by_name"})"
          type="text"
          value=""
        >
          <TextInputBase
            aria-label="t(toolbar.label_placeholder_filter, {"context":"search_by_name"})"
            className="quipucords-form__text-input "
            data-test="toolbarSearchName"
            id="generatedid-"
            innerRef={null}
            isDisabled={false}
            isIconSprite={false}
            isLeftTruncated={false}
            isReadOnly={false}
            isRequired={false}
            maxLength={255}
            name="generatedid-"
            onChange={[Function]}
            onKeyUp={[Function]}
            onMouseUp={[Function]}
            ouiaSafe={true}
            placeholder="t(toolbar.label_placeholder_filter, {"context":"search_by_name"})"
            type="text"
            validated="default"
            value=""
          >
            <input
              aria-invalid={false}
              aria-label="t(toolbar.label_placeholder_filter, {"context":"search_by_name"})"
              className="pf-c-form-control quipucords-form__text-input "
              data-ouia-component-id="OUIA-Generated-TextInputBase-2"
              data-ouia-component-type="PF4/TextInput"
              data-ouia-safe={true}
              data-test="toolbarSearchName"
              disabled={false}
              id="generatedid-"
              maxLength={255}
              name="generatedid-"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyUp={[Function]}
              onMouseUp={[Function]}
              placeholder="t(toolbar.label_placeholder_filter, {"context":"search_by_name"})"
              readOnly={false}
              required={false}
              type="text"
              value=""
            />
          </TextInputBase>
        </TextInput>
      </TextInput>
    </div>
  </InputGroup>
</ViewToolbarTextInput>
`;

exports[`ViewToolbar Component should render a basic component: basic 1`] = `
<Fragment>
  <Toolbar
    className="quipucords-toolbar"
    clearAllFilters={[Function]}
    clearFiltersButtonText="t(toolbar.label, {"context":"clear-filters"})"
    collapseListedFiltersBreakpoint="lg"
  >
    <ToolbarContent
      isExpanded={false}
      showClearFiltersButton={false}
    >
      <ToolbarToggleGroup
        breakpoint="lg"
        toggleIcon={
          <FilterIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        }
      >
        <ForwardRef
          variant="filter-group"
        >
          <ToolbarItem>
            <ViewToolbarSelectCategory
              t={[Function]}
              useOnSelect={[Function]}
              useSelector={[Function]}
              useView={[Function]}
            />
          </ToolbarItem>
          <ToolbarFilter
            categoryName="t(toolbar.label_option, {"context":"search_by_name"})"
            chips={[]}
            deleteChip={[Function]}
            key="search_by_name"
            showToolbarItem={false}
          >
            <SearchName />
          </ToolbarFilter>
          <ToolbarFilter
            categoryName="t(toolbar.label_option, {"context":"search_credentials_by_name"})"
            chips={[]}
            deleteChip={[Function]}
            key="search_credentials_by_name"
            showToolbarItem={false}
          >
            <SearchCredentialsName />
          </ToolbarFilter>
          <ToolbarFilter
            categoryName="t(toolbar.label_option, {"context":"source_type"})"
            chips={[]}
            deleteChip={[Function]}
            key="source_type"
            showToolbarItem={false}
          >
            <SourceType />
          </ToolbarFilter>
        </ForwardRef>
      </ToolbarToggleGroup>
      <ToolbarItem
        key="groupSeparator"
        variant="separator"
      />
      <ToolbarItem
        key="sortFields"
        spacer={
          {
            "default": "spacerSm",
          }
        }
      >
        <ViewToolbarFieldSort
          t={[Function]}
          useOnSelect={[Function]}
          useView={[Function]}
        />
      </ToolbarItem>
      <ToolbarItem
        key="sortSeparator"
        variant="separator"
      />
      <ToolbarItem
        key="lastRefresh"
      >
        <RefreshTimeButton
          lastRefresh={0}
          onRefresh={[Function]}
          t={[Function]}
        />
      </ToolbarItem>
      <ToolbarItem
        alignment={
          {
            "lg": "alignRight",
            "md": "alignLeft",
          }
        }
        key="secondaryFields"
      />
    </ToolbarContent>
  </Toolbar>
  <Divider />
</Fragment>
`;
