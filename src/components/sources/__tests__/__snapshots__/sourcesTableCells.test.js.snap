// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SourcesTableCells should export specific function components: function components 1`] = `
{
  "actionsCell": [Function],
  "credentialsCellContent": [Function],
  "description": [Function],
  "failedHostsCellContent": [Function],
  "okHostsCellContent": [Function],
  "scanStatus": [Function],
  "statusCell": [Function],
  "statusContent": [Function],
  "unreachableHostsCellContent": [Function],
}
`;

exports[`SourcesTableCells should return consistent cell results: basic actionsCell cell 1`] = `
<OverflowMenu
  breakpoint="lg"
>
  <OverflowMenuContent>
    <OverflowMenuGroup
      groupType="button"
    >
      <OverflowMenuItem>
        <Tooltip
          content="t(table.label, {"context":"edit"})"
          delayShow={500}
          id={null}
          isPopover={false}
          placement="top"
        >
          <Button
            aria-label="t(table.label, {"context":"edit"})"
            className="quipucords-view__row-button"
            onClick={[Function]}
            variant="plain"
          >
            <PencilAltIcon
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            />
          </Button>
        </Tooltip>
      </OverflowMenuItem>
      <OverflowMenuItem>
        <Tooltip
          content="t(table.label, {"context":"delete"})"
          delayShow={500}
          id={null}
          isPopover={false}
          placement="top"
        >
          <Button
            aria-label="t(table.label, {"context":"delete"})"
            className="quipucords-view__row-button"
            onClick={[Function]}
            variant="plain"
          >
            <TrashIcon
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            />
          </Button>
        </Tooltip>
      </OverflowMenuItem>
      <OverflowMenuItem>
        <Button
          onClick={[Function]}
          variant="secondary"
        >
          t(table.label, {"context":"scan"})
        </Button>
      </OverflowMenuItem>
    </OverflowMenuGroup>
  </OverflowMenuContent>
  <OverflowMenuControl>
    <DropdownSelect
      ariaLabel="Select option"
      buttonVariant="plain"
      className=""
      direction="down"
      id="generatedid-"
      isDisabled={false}
      isDropdownButton={true}
      isFlipEnabled={false}
      isInline={true}
      isToggleText={true}
      maxHeight={null}
      name={null}
      onSelect={[Function]}
      onSplitButton={[Function]}
      options={
        [
          {
            "title": "t(table.label, {"context":"edit"})",
            "value": "edit",
          },
          {
            "title": "t(table.label, {"context":"delete"})",
            "value": "delete",
          },
          {
            "title": "t(table.label, {"context":"Scan"})",
            "value": "scan",
          },
        ]
      }
      placeholder={
        <EllipsisVIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
        />
      }
      position="right"
      selectedOptions={null}
      splitButtonVariant={null}
      toggleIcon={null}
      variant="single"
    />
  </OverflowMenuControl>
</OverflowMenu>
`;

exports[`SourcesTableCells should return consistent cell results: basic credentialsCellContent cell 1`] = `
{
  "content": <Tooltip
    content="t(table.label_status_tooltip, {"context":"idCard","count":0})"
    delayShow={500}
    id={null}
    isPopover={false}
    placement="top"
  >
    t(table.label_status, {"context":"cell","count":0}, [object Object],[object Object])
  </Tooltip>,
  "expandedContent": undefined,
}
`;

exports[`SourcesTableCells should return consistent cell results: basic description cell 1`] = `
<Grid
  hasGutter={false}
>
  <GridItem
    sm={2}
  >
    <Tooltip
      content="t(table.label, {"context":""})"
      delayShow={500}
      id={null}
      isPopover={false}
      placement="top"
    >
      <ContextIcon
        size="sm"
        symbol={null}
      />
    </Tooltip>
  </GridItem>
  <GridItem
    sm={10}
  >
    <div>
      <strong />
    </div>
  </GridItem>
</Grid>
`;

exports[`SourcesTableCells should return consistent cell results: basic failedHostsCellContent cell 1`] = `
{
  "content": <Tooltip
    content="t(table.label_status_tooltip, {"context":"failed","count":0})"
    delayShow={500}
    id={null}
    isPopover={false}
    placement="top"
  >
    t(table.label_status, {"context":"cell","count":0}, [object Object],[object Object])
  </Tooltip>,
  "expandedContent": undefined,
}
`;

exports[`SourcesTableCells should return consistent cell results: basic okHostsCellContent cell 1`] = `
{
  "content": <Tooltip
    content="t(table.label_status_tooltip, {"context":"success","count":0})"
    delayShow={500}
    id={null}
    isPopover={false}
    placement="top"
  >
    t(table.label_status, {"context":"cell","count":0}, [object Object],[object Object])
  </Tooltip>,
  "expandedContent": undefined,
}
`;

exports[`SourcesTableCells should return consistent cell results: basic scanStatus cell 1`] = `
<Grid
  hasGutter={false}
>
  <GridItem
    sm={2}
  >
    <ContextIcon
      size="sm"
      symbol={null}
    />
  </GridItem>
  <GridItem
    sm={10}
  >
    <div>
      t(table.label, {"context":"status"})
    </div>
    a day ago
  </GridItem>
</Grid>
`;

exports[`SourcesTableCells should return consistent cell results: basic statusCell cell 1`] = `
<Tooltip
  content="t(table.label_status_tooltip, {"context":"unknown","count":0})"
  delayShow={500}
  id={null}
  isPopover={false}
  placement="top"
>
  t(table.label_status, {"context":"cell","count":0}, [object Object],[object Object])
</Tooltip>
`;

exports[`SourcesTableCells should return consistent cell results: basic statusContent cell 1`] = `
<Memo(Connect(ScanHostList))
  filter={
    {
      "source_type": undefined,
      "status": undefined,
    }
  }
  useConnectionResults={true}
  useInspectionResults={false}
>
  [Function]
</Memo(Connect(ScanHostList))>
`;

exports[`SourcesTableCells should return consistent cell results: basic unreachableHostsCellContent cell 1`] = `
{
  "content": <Tooltip
    content="t(table.label_status_tooltip, {"context":"unreachable","count":0})"
    delayShow={500}
    id={null}
    isPopover={false}
    placement="top"
  >
    t(table.label_status, {"context":"cell","count":0}, [object Object],[object Object])
  </Tooltip>,
  "expandedContent": undefined,
}
`;
