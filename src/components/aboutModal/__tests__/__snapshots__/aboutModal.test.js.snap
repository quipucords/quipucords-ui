// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AboutModal Component should contain brand: brand 1`] = `
<AboutModal
  altLogo="Ipsum"
  className=""
  logo="logo-brand.svg"
  onHide={[Function]}
  productTitle={
    <img
      alt="Lorem ipsum"
      src="title-brand.svg"
    />
  }
  show={true}
  trademarkText="Copyright (c) 2019 Red Hat Inc."
>
  <div
    aria-label="Application information copied"
    aria-live="polite"
    tabIndex={-1}
  >
    <AboutModalVersions
      className="quipucords-about-modal-list"
    >
      <AboutModalVersionItem
        className=""
        label="UI Version"
        versionText="0.0.0.0000000"
      />
    </AboutModalVersions>
  </div>
  <div
    className="quipucords-about-modal-copy-footer"
  >
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="default"
      className="quipucords-about-modal-copy-button"
      disabled={false}
      onClick={[Function]}
      title="Copy application information"
    >
      <Icon
        name="paste"
        type="fa"
      />
    </Button>
  </div>
</AboutModal>
`;

exports[`AboutModal Component should have a copy event that updates state: post copy event 1`] = `
Object {
  "copied": null,
  "timer": 11,
}
`;

exports[`AboutModal Component should have a copy event that updates state: pre copy event 1`] = `
Object {
  "copied": null,
  "timer": null,
}
`;

exports[`AboutModal Component should render a connected component with default props: connected 1`] = `
<AboutModal
  altLogo="Quipucords"
  className=""
  logo="logo.svg"
  onHide={[Function]}
  productTitle={
    <img
      alt="Quipucords"
      src="title.svg"
    />
  }
  show={true}
  trademarkText=""
>
  <div
    aria-label="Application information copied"
    aria-live="polite"
    tabIndex={-1}
  >
    <AboutModalVersions
      className="quipucords-about-modal-list"
    >
      <AboutModalVersionItem
        className=""
        label="Username"
        versionText="lorem"
      />
      <AboutModalVersionItem
        className=""
        label="Server Version"
        versionText="0.0.0.0000000"
      />
      <AboutModalVersionItem
        className=""
        label="UI Version"
        versionText="0.0.0.0000000"
      />
    </AboutModalVersions>
  </div>
  <div
    className="quipucords-about-modal-copy-footer"
  >
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="default"
      className="quipucords-about-modal-copy-button"
      disabled={false}
      onClick={[Function]}
      title="Copy application information"
    >
      <Icon
        name="paste"
        type="fa"
      />
    </Button>
  </div>
</AboutModal>
`;

exports[`AboutModal Component should render a non-connected component: hidden modal 1`] = `
<AboutModal
  getStatus={[Function]}
  getUser={[Function]}
  resetTimer={3000}
  serverVersion="0.0.0.0000000"
  show={false}
  t={[Function]}
  uiBrand={false}
  uiName="Quipucords"
  uiShortName="Quipucords"
  uiVersion="0.0.0.0000000"
  username="admin"
>
  <AboutModal
    altLogo="Quipucords"
    className=""
    logo="logo.svg"
    onHide={[Function]}
    productTitle={
      <img
        alt="Quipucords"
        src="title.svg"
      />
    }
    show={false}
    trademarkText=""
  >
    <Modal
      animation={true}
      autoFocus={true}
      backdrop={true}
      bsClass="modal"
      className=""
      contentClassName="about-modal-pf"
      dialogComponentClass={[Function]}
      enforceFocus={true}
      keyboard={true}
      manager={
        ModalManager {
          "add": [Function],
          "containers": Array [],
          "data": Array [],
          "handleContainerOverflow": true,
          "hideSiblingNodes": true,
          "isTopModal": [Function],
          "modals": Array [],
          "remove": [Function],
        }
      }
      onHide={[Function]}
      renderBackdrop={[Function]}
      restoreFocus={true}
      show={false}
    >
      <Modal
        autoFocus={true}
        backdrop={true}
        backdropClassName="modal-backdrop"
        backdropTransition={[Function]}
        containerClassName="modal-open"
        enforceFocus={true}
        keyboard={true}
        manager={
          ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          }
        }
        onEntering={[Function]}
        onExited={[Function]}
        onHide={[Function]}
        renderBackdrop={[Function]}
        restoreFocus={true}
        show={false}
        transition={[Function]}
      />
    </Modal>
  </AboutModal>
</AboutModal>
`;
