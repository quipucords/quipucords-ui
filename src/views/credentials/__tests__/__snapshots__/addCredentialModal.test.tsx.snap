// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddCredentialModal should call onSubmit with the correct filtered data when "Save" is clicked: onSubmit, filtered data 1`] = `
{
  "cred_type": "network",
  "name": "Test Credential",
  "password": "<redacted>",
  "username": "demo",
}
`;

exports[`AddCredentialModal should have the correct title: AddCredentialModal Title 1`] = `
<span
  class="pf-v6-c-modal-box__title-text"
>
  Add credential: network
</span>
`;

exports[`AddCredentialModal should render a basic component: basic 1`] = `
<Modal
  actions={[]}
  appendTo={[Function]}
  aria-describedby=""
  aria-label=""
  aria-labelledby=""
  className=""
  hasNoBodyWrapper={false}
  isOpen={true}
  onClose={[Function]}
  ouiaSafe={true}
  position="default"
  showClose={true}
  title="Add credential: "
  titleIconVariant={null}
  titleLabel=""
  variant="small"
>
  <CredentialForm
    onClearErrors={[Function]}
    onClose={[Function]}
    onSubmit={[Function]}
  />
</Modal>
`;

exports[`CredentialForm should call handlers for handleInputChange - SSH Key: handleInputChange 1`] = `
[
  [
    "username",
    "d",
  ],
  [
    "username",
    "i",
  ],
  [
    "username",
    "s",
  ],
  [
    "username",
    "c",
  ],
  [
    "username",
    "o",
  ],
  [
    "username",
    "v",
  ],
  [
    "username",
    "e",
  ],
  [
    "username",
    "r",
  ],
  [
    "username",
    "y",
  ],
  [
    "ssh_key",
    "s",
  ],
  [
    "ssh_key",
    "ss",
  ],
  [
    "ssh_key",
    "ssh",
  ],
  [
    "ssh_key",
    "ssh ",
  ],
  [
    "ssh_key",
    "ssh k",
  ],
  [
    "ssh_key",
    "ssh ke",
  ],
  [
    "ssh_key",
    "ssh key",
  ],
  [
    "ssh_key",
    "ssh key ",
  ],
  [
    "ssh_key",
    "ssh key f",
  ],
  [
    "ssh_key",
    "ssh key fi",
  ],
  [
    "ssh_key",
    "ssh key fil",
  ],
  [
    "ssh_key",
    "ssh key file",
  ],
  [
    "ssh_key",
    "ssh key file ",
  ],
  [
    "ssh_key",
    "ssh key file c",
  ],
  [
    "ssh_key",
    "ssh key file co",
  ],
  [
    "ssh_key",
    "ssh key file con",
  ],
  [
    "ssh_key",
    "ssh key file cont",
  ],
  [
    "ssh_key",
    "ssh key file conte",
  ],
  [
    "ssh_key",
    "ssh key file conten",
  ],
  [
    "ssh_key",
    "ssh key file content",
  ],
  [
    "ssh_passphrase",
    "s",
  ],
  [
    "ssh_passphrase",
    "se",
  ],
  [
    "ssh_passphrase",
    "sec",
  ],
  [
    "ssh_passphrase",
    "secr",
  ],
  [
    "ssh_passphrase",
    "secre",
  ],
  [
    "ssh_passphrase",
    "secret",
  ],
  [
    "ssh_passphrase",
    "secret!",
  ],
]
`;

exports[`CredentialForm should call handlers for setAuthType and handleInputChange - Token: handleInputChange 1`] = `
[
  [
    "auth_token",
    "s",
  ],
  [
    "auth_token",
    "u",
  ],
  [
    "auth_token",
    "p",
  ],
  [
    "auth_token",
    "e",
  ],
  [
    "auth_token",
    "r",
  ],
  [
    "auth_token",
    " ",
  ],
  [
    "auth_token",
    "s",
  ],
  [
    "auth_token",
    "e",
  ],
  [
    "auth_token",
    "c",
  ],
  [
    "auth_token",
    "r",
  ],
  [
    "auth_token",
    "e",
  ],
  [
    "auth_token",
    "t",
  ],
  [
    "auth_token",
    " ",
  ],
  [
    "auth_token",
    "A",
  ],
  [
    "auth_token",
    "P",
  ],
  [
    "auth_token",
    "I",
  ],
  [
    "auth_token",
    " ",
  ],
  [
    "auth_token",
    "t",
  ],
  [
    "auth_token",
    "o",
  ],
  [
    "auth_token",
    "k",
  ],
  [
    "auth_token",
    "e",
  ],
  [
    "auth_token",
    "n",
  ],
]
`;

exports[`CredentialForm should call handlers for setAuthType and handleInputChange - Username and Password: handleInputChange 1`] = `
[
  [
    "username",
    "d",
  ],
  [
    "username",
    "i",
  ],
  [
    "username",
    "s",
  ],
  [
    "username",
    "c",
  ],
  [
    "username",
    "o",
  ],
  [
    "username",
    "v",
  ],
  [
    "username",
    "e",
  ],
  [
    "username",
    "r",
  ],
  [
    "username",
    "y",
  ],
  [
    "password",
    "s",
  ],
  [
    "password",
    "e",
  ],
  [
    "password",
    "c",
  ],
  [
    "password",
    "r",
  ],
  [
    "password",
    "e",
  ],
  [
    "password",
    "t",
  ],
  [
    "password",
    "!",
  ],
  [
    "become_method",
    "sudo",
  ],
  [
    "become_user",
    "r",
  ],
  [
    "become_user",
    "ro",
  ],
  [
    "become_user",
    "roo",
  ],
  [
    "become_user",
    "root",
  ],
  [
    "become_password",
    "s",
  ],
  [
    "become_password",
    "se",
  ],
  [
    "become_password",
    "sec",
  ],
  [
    "become_password",
    "secu",
  ],
  [
    "become_password",
    "secur",
  ],
  [
    "become_password",
    "secure",
  ],
  [
    "become_password",
    "secure ",
  ],
  [
    "become_password",
    "secure s",
  ],
  [
    "become_password",
    "secure se",
  ],
  [
    "become_password",
    "secure sec",
  ],
  [
    "become_password",
    "secure secr",
  ],
  [
    "become_password",
    "secure secre",
  ],
  [
    "become_password",
    "secure secret",
  ],
  [
    "become_password",
    "secure secret!",
  ],
]
`;

exports[`CredentialForm should call handlers for setAuthType and handleInputChange - Username and Password: setAuthType 1`] = `
[
  [
    "SSH Key",
  ],
]
`;

exports[`CredentialForm should render a basic component: basic 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      validated="default"
      value=""
    />
    <ErrorFragment
      fieldTouched={false}
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_type"
    label="Authentication Type"
  >
    <SimpleDropdown
      dropdownItems={
        [
          {
            "item": "Username and Password",
            "ouiaId": "password",
          },
          {
            "item": "SSH Key",
            "ouiaId": "ssh_key",
          },
        ]
      }
      isFullWidth={true}
      label="Username and Password"
      menuToggleOuiaId="auth_type"
      onSelect={[Function]}
      variant="default"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
        validated="default"
        value=""
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
        validated="default"
        value=""
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
  </React.Fragment>
  <React.Fragment>
    <FormGroup
      fieldId="become_method"
      label="Become Method"
    >
      <SimpleDropdown
        dropdownItems={
          [
            {
              "item": "Select option",
              "ouiaId": "default",
            },
            {
              "item": "sudo",
              "ouiaId": "sudo",
            },
            {
              "item": "su",
              "ouiaId": "su",
            },
            {
              "item": "pbrun",
              "ouiaId": "pbrun",
            },
            {
              "item": "pfexec",
              "ouiaId": "pfexec",
            },
            {
              "item": "doas",
              "ouiaId": "doas",
            },
            {
              "item": "dzdo",
              "ouiaId": "dzdo",
            },
            {
              "item": "ksu",
              "ouiaId": "ksu",
            },
            {
              "item": "runas",
              "ouiaId": "runas",
            },
          ]
        }
        isFullWidth={true}
        label="Select option"
        menuToggleOuiaId="become_method"
        onSelect={[Function]}
        variant="default"
      />
    </FormGroup>
    <FormGroup
      fieldId="become_user"
      label="Become User"
    >
      <TextInput
        id="become_user"
        name="become_user"
        onChange={[Function]}
        ouiaId="become_user"
        placeholder="Enter become user (optional)"
        type="text"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
    <FormGroup
      fieldId="become_password"
      label="Become Password"
    >
      <SecretInput
        id="become_password"
        name="become_password"
        onChange={[Function]}
        onEditBegin={[Function]}
        onUndo={[Function]}
        ouiaId="become_password"
        placeholder="Enter become password (optional)"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      isDisabled={true}
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render form to different cred types appropriately: ansible, "Username and Password" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      validated="default"
      value=""
    />
    <ErrorFragment
      fieldTouched={false}
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
        validated="default"
        value=""
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
        validated="default"
        value=""
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      isDisabled={true}
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render form to different cred types appropriately: satellite, "Username and Password" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      validated="default"
      value=""
    />
    <ErrorFragment
      fieldTouched={false}
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
        validated="default"
        value=""
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
        validated="default"
        value=""
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      isDisabled={true}
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render form to different cred types appropriately: vcenter, "Username and Password" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      validated="default"
      value=""
    />
    <ErrorFragment
      fieldTouched={false}
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
        validated="default"
        value=""
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
        validated="default"
        value=""
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      isDisabled={true}
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render form to rhacs appropriately: rhacs, "Token" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      validated="default"
      value=""
    />
    <ErrorFragment
      fieldTouched={false}
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_token"
    isRequired={true}
    label="Token"
  >
    <TextInput
      id="credential-token"
      isRequired={true}
      name="auth_token"
      onChange={[Function]}
      ouiaId="auth_token"
      placeholder="Enter Token"
      type="text"
      validated="default"
      value=""
    />
    <ErrorFragment
      fieldTouched={false}
    />
  </FormGroup>
  <ActionGroup>
    <Button
      isDisabled={true}
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render specific to authType for type network: network, SSH Key 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      validated="default"
    />
    <ErrorFragment
      fieldTouched={false}
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_type"
    label="Authentication Type"
  >
    <SimpleDropdown
      dropdownItems={
        [
          {
            "item": "Username and Password",
            "ouiaId": "password",
          },
          {
            "item": "SSH Key",
            "ouiaId": "ssh_key",
          },
        ]
      }
      isFullWidth={true}
      label="SSH Key"
      menuToggleOuiaId="auth_type"
      onSelect={[Function]}
      variant="default"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
    <FormGroup
      fieldId="ssh_key"
      isRequired={true}
      label="SSH Key"
    >
      <TextArea
        data-ouia-component-id="ssh_key"
        id="credential-ssh-key"
        isRequired={true}
        name="ssh_key"
        onChange={[Function]}
        placeholder="Enter private SSH Key"
        rows={10}
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
    <FormGroup
      fieldId="ssh_passphrase"
      label="SSH passphrase"
    >
      <SecretInput
        id="ssh_passphrase"
        name="ssh_passphrase"
        onChange={[Function]}
        onEditBegin={[Function]}
        onUndo={[Function]}
        ouiaId="ssh_passphrase"
        placeholder="Enter SSH passphrase (optional)"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
  </React.Fragment>
  <React.Fragment>
    <FormGroup
      fieldId="become_method"
      label="Become Method"
    >
      <SimpleDropdown
        dropdownItems={
          [
            {
              "item": "Select option",
              "ouiaId": "default",
            },
            {
              "item": "sudo",
              "ouiaId": "sudo",
            },
            {
              "item": "su",
              "ouiaId": "su",
            },
            {
              "item": "pbrun",
              "ouiaId": "pbrun",
            },
            {
              "item": "pfexec",
              "ouiaId": "pfexec",
            },
            {
              "item": "doas",
              "ouiaId": "doas",
            },
            {
              "item": "dzdo",
              "ouiaId": "dzdo",
            },
            {
              "item": "ksu",
              "ouiaId": "ksu",
            },
            {
              "item": "runas",
              "ouiaId": "runas",
            },
          ]
        }
        isFullWidth={true}
        label="Select option"
        menuToggleOuiaId="become_method"
        onSelect={[Function]}
        variant="default"
      />
    </FormGroup>
    <FormGroup
      fieldId="become_user"
      label="Become User"
    >
      <TextInput
        id="become_user"
        name="become_user"
        onChange={[Function]}
        ouiaId="become_user"
        placeholder="Enter become user (optional)"
        type="text"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
    <FormGroup
      fieldId="become_password"
      label="Become Password"
    >
      <SecretInput
        id="become_password"
        name="become_password"
        onChange={[Function]}
        onEditBegin={[Function]}
        onUndo={[Function]}
        ouiaId="become_password"
        placeholder="Enter become password (optional)"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      isDisabled={true}
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render specific to authType for type network: network, Username and Password 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      validated="default"
    />
    <ErrorFragment
      fieldTouched={false}
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_type"
    label="Authentication Type"
  >
    <SimpleDropdown
      dropdownItems={
        [
          {
            "item": "Username and Password",
            "ouiaId": "password",
          },
          {
            "item": "SSH Key",
            "ouiaId": "ssh_key",
          },
        ]
      }
      isFullWidth={true}
      label="Username and Password"
      menuToggleOuiaId="auth_type"
      onSelect={[Function]}
      variant="default"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
  </React.Fragment>
  <React.Fragment>
    <FormGroup
      fieldId="become_method"
      label="Become Method"
    >
      <SimpleDropdown
        dropdownItems={
          [
            {
              "item": "Select option",
              "ouiaId": "default",
            },
            {
              "item": "sudo",
              "ouiaId": "sudo",
            },
            {
              "item": "su",
              "ouiaId": "su",
            },
            {
              "item": "pbrun",
              "ouiaId": "pbrun",
            },
            {
              "item": "pfexec",
              "ouiaId": "pfexec",
            },
            {
              "item": "doas",
              "ouiaId": "doas",
            },
            {
              "item": "dzdo",
              "ouiaId": "dzdo",
            },
            {
              "item": "ksu",
              "ouiaId": "ksu",
            },
            {
              "item": "runas",
              "ouiaId": "runas",
            },
          ]
        }
        isFullWidth={true}
        label="Select option"
        menuToggleOuiaId="become_method"
        onSelect={[Function]}
        variant="default"
      />
    </FormGroup>
    <FormGroup
      fieldId="become_user"
      label="Become User"
    >
      <TextInput
        id="become_user"
        name="become_user"
        onChange={[Function]}
        ouiaId="become_user"
        placeholder="Enter become user (optional)"
        type="text"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
    <FormGroup
      fieldId="become_password"
      label="Become Password"
    >
      <SecretInput
        id="become_password"
        name="become_password"
        onChange={[Function]}
        onEditBegin={[Function]}
        onUndo={[Function]}
        ouiaId="become_password"
        placeholder="Enter become password (optional)"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      isDisabled={true}
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render specific to authType for type openshift: openshift, "Token" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      validated="default"
    />
    <ErrorFragment
      fieldTouched={false}
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_type"
    label="Authentication Type"
  >
    <SimpleDropdown
      dropdownItems={
        [
          {
            "item": "Token",
            "ouiaId": "auth_token",
          },
          {
            "item": "Username and Password",
            "ouiaId": "password",
          },
        ]
      }
      isFullWidth={true}
      label="Token"
      menuToggleOuiaId="auth_type"
      onSelect={[Function]}
      variant="default"
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_token"
    isRequired={true}
    label="Token"
  >
    <TextInput
      id="credential-token"
      isRequired={true}
      name="auth_token"
      onChange={[Function]}
      ouiaId="auth_token"
      placeholder="Enter Token"
      type="text"
      validated="default"
    />
    <ErrorFragment
      fieldTouched={false}
    />
  </FormGroup>
  <ActionGroup>
    <Button
      isDisabled={true}
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render specific to authType for type openshift: openshift, "Username and Password" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      validated="default"
    />
    <ErrorFragment
      fieldTouched={false}
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_type"
    label="Authentication Type"
  >
    <SimpleDropdown
      dropdownItems={
        [
          {
            "item": "Token",
            "ouiaId": "auth_token",
          },
          {
            "item": "Username and Password",
            "ouiaId": "password",
          },
        ]
      }
      isFullWidth={true}
      label="Username and Password"
      menuToggleOuiaId="auth_type"
      onSelect={[Function]}
      variant="default"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
        validated="default"
      />
      <ErrorFragment
        fieldTouched={false}
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      isDisabled={true}
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should submit updated credential data: edit credential form, after 1`] = `"<form novalidate="" class="pf-v6-c-form"><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="name"><span class="pf-v6-c-form__label-text">Name</span><span class="pf-v6-c-form__label-required" aria-hidden="true"> *</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="credential-name" name="name" type="text" aria-invalid="false" required="" placeholder="Enter a name for the credential" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="cred_name" value="Test changing name"></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="auth_type"><span class="pf-v6-c-form__label-text">Authentication Type</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><button class="pf-v6-c-menu-toggle pf-m-full-width" type="button" aria-label="Dropdown menu" aria-expanded="false" data-ouia-component-type="PF6/MenuToggle" data-ouia-safe="true" data-ouia-component-id="auth_type"><span class="pf-v6-c-menu-toggle__text">Username and Password</span><span class="pf-v6-c-menu-toggle__controls"><span class="pf-v6-c-menu-toggle__toggle-icon"><svg class="pf-v6-svg" viewBox="0 0 320 512" fill="currentColor" aria-hidden="true" role="img" width="1em" height="1em"><path d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"></path></svg></span></span></button></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="username"><span class="pf-v6-c-form__label-text">Username</span><span class="pf-v6-c-form__label-required" aria-hidden="true"> *</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="credential-username" name="username" type="text" aria-invalid="false" placeholder="Enter username" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="username" value="discovery"></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="password"><span class="pf-v6-c-form__label-text">Password</span><span class="pf-v6-c-form__label-required" aria-hidden="true"> *</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="credential-password" name="password" type="password" aria-invalid="false" placeholder="****" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="password" value=""></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="become_method"><span class="pf-v6-c-form__label-text">Become Method</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><button class="pf-v6-c-menu-toggle pf-m-full-width" type="button" aria-label="Dropdown menu" aria-expanded="false" data-ouia-component-type="PF6/MenuToggle" data-ouia-safe="true" data-ouia-component-id="become_method"><span class="pf-v6-c-menu-toggle__text">Select option</span><span class="pf-v6-c-menu-toggle__controls"><span class="pf-v6-c-menu-toggle__toggle-icon"><svg class="pf-v6-svg" viewBox="0 0 320 512" fill="currentColor" aria-hidden="true" role="img" width="1em" height="1em"><path d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"></path></svg></span></span></button></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="become_user"><span class="pf-v6-c-form__label-text">Become User</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="become_user" name="become_user" type="text" aria-invalid="false" placeholder="Enter become user (optional)" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="become_user" value=""></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="become_password"><span class="pf-v6-c-form__label-text">Become Password</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><div class="pf-v6-c-input-group"><div class="pf-v6-c-input-group__item pf-m-fill"><span class="pf-v6-c-form-control"><input id="become_password" name="become_password" type="password" aria-invalid="false" placeholder="Enter become password (optional)" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="become_password" value=""></span></div></div></div></div><div class="pf-v6-c-form__group pf-m-action"><div class="pf-v6-c-form__group-control"><div class="pf-v6-c-form__actions"><button class="pf-v6-c-button pf-m-primary" type="button" data-ouia-component-type="PF6/Button" data-ouia-safe="true" data-ouia-component-id="OUIA-Generated-Button-primary-10"><span class="pf-v6-c-button__text">Save</span></button><button class="pf-v6-c-button pf-m-link" type="button" data-ouia-component-type="PF6/Button" data-ouia-safe="true" data-ouia-component-id="OUIA-Generated-Button-link-10"><span class="pf-v6-c-button__text">Cancel</span></button></div></div></div></form>"`;

exports[`CredentialForm should work with default onClose: onClose 1`] = `"<form novalidate="" class="pf-v6-c-form"><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="name"><span class="pf-v6-c-form__label-text">Name</span><span class="pf-v6-c-form__label-required" aria-hidden="true"> *</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="credential-name" name="name" type="text" aria-invalid="false" required="" placeholder="Enter a name for the credential" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="cred_name" value=""></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="auth_type"><span class="pf-v6-c-form__label-text">Authentication Type</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><button class="pf-v6-c-menu-toggle pf-m-full-width" type="button" aria-label="Dropdown menu" aria-expanded="false" data-ouia-component-type="PF6/MenuToggle" data-ouia-safe="true" data-ouia-component-id="auth_type"><span class="pf-v6-c-menu-toggle__text">Username and Password</span><span class="pf-v6-c-menu-toggle__controls"><span class="pf-v6-c-menu-toggle__toggle-icon"><svg class="pf-v6-svg" viewBox="0 0 320 512" fill="currentColor" aria-hidden="true" role="img" width="1em" height="1em"><path d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"></path></svg></span></span></button></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="username"><span class="pf-v6-c-form__label-text">Username</span><span class="pf-v6-c-form__label-required" aria-hidden="true"> *</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="credential-username" name="username" type="text" aria-invalid="false" required="" placeholder="Enter username" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="username" value=""></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="password"><span class="pf-v6-c-form__label-text">Password</span><span class="pf-v6-c-form__label-required" aria-hidden="true"> *</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="credential-password" name="password" type="password" aria-invalid="false" required="" placeholder="Enter password" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="password" value=""></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="become_method"><span class="pf-v6-c-form__label-text">Become Method</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><button class="pf-v6-c-menu-toggle pf-m-full-width" type="button" aria-label="Dropdown menu" aria-expanded="false" data-ouia-component-type="PF6/MenuToggle" data-ouia-safe="true" data-ouia-component-id="become_method"><span class="pf-v6-c-menu-toggle__text">Select option</span><span class="pf-v6-c-menu-toggle__controls"><span class="pf-v6-c-menu-toggle__toggle-icon"><svg class="pf-v6-svg" viewBox="0 0 320 512" fill="currentColor" aria-hidden="true" role="img" width="1em" height="1em"><path d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"></path></svg></span></span></button></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="become_user"><span class="pf-v6-c-form__label-text">Become User</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="become_user" name="become_user" type="text" aria-invalid="false" placeholder="Enter become user (optional)" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="become_user" value=""></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="become_password"><span class="pf-v6-c-form__label-text">Become Password</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><div class="pf-v6-c-input-group"><div class="pf-v6-c-input-group__item pf-m-fill"><span class="pf-v6-c-form-control"><input id="become_password" name="become_password" type="password" aria-invalid="false" placeholder="Enter become password (optional)" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="become_password" value=""></span></div></div></div></div><div class="pf-v6-c-form__group pf-m-action"><div class="pf-v6-c-form__group-control"><div class="pf-v6-c-form__actions"><button class="pf-v6-c-button pf-m-primary" type="button" data-ouia-component-type="PF6/Button" data-ouia-safe="true" data-ouia-component-id="OUIA-Generated-Button-primary-8"><span class="pf-v6-c-button__text">Save</span></button><button class="pf-v6-c-button pf-m-link" type="button" data-ouia-component-type="PF6/Button" data-ouia-safe="true" data-ouia-component-id="OUIA-Generated-Button-link-8"><span class="pf-v6-c-button__text">Cancel</span></button></div></div></div></form>"`;

exports[`CredentialForm should work with default onSubmit: onSave 1`] = `"<form novalidate="" class="pf-v6-c-form"><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="name"><span class="pf-v6-c-form__label-text">Name</span><span class="pf-v6-c-form__label-required" aria-hidden="true"> *</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="credential-name" name="name" type="text" aria-invalid="false" required="" placeholder="Enter a name for the credential" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="cred_name" value=""></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="auth_type"><span class="pf-v6-c-form__label-text">Authentication Type</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><button class="pf-v6-c-menu-toggle pf-m-full-width" type="button" aria-label="Dropdown menu" aria-expanded="false" data-ouia-component-type="PF6/MenuToggle" data-ouia-safe="true" data-ouia-component-id="auth_type"><span class="pf-v6-c-menu-toggle__text">Username and Password</span><span class="pf-v6-c-menu-toggle__controls"><span class="pf-v6-c-menu-toggle__toggle-icon"><svg class="pf-v6-svg" viewBox="0 0 320 512" fill="currentColor" aria-hidden="true" role="img" width="1em" height="1em"><path d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"></path></svg></span></span></button></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="username"><span class="pf-v6-c-form__label-text">Username</span><span class="pf-v6-c-form__label-required" aria-hidden="true"> *</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="credential-username" name="username" type="text" aria-invalid="false" required="" placeholder="Enter username" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="username" value=""></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="password"><span class="pf-v6-c-form__label-text">Password</span><span class="pf-v6-c-form__label-required" aria-hidden="true"> *</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="credential-password" name="password" type="password" aria-invalid="false" required="" placeholder="Enter password" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="password" value=""></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="become_method"><span class="pf-v6-c-form__label-text">Become Method</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><button class="pf-v6-c-menu-toggle pf-m-full-width" type="button" aria-label="Dropdown menu" aria-expanded="false" data-ouia-component-type="PF6/MenuToggle" data-ouia-safe="true" data-ouia-component-id="become_method"><span class="pf-v6-c-menu-toggle__text">Select option</span><span class="pf-v6-c-menu-toggle__controls"><span class="pf-v6-c-menu-toggle__toggle-icon"><svg class="pf-v6-svg" viewBox="0 0 320 512" fill="currentColor" aria-hidden="true" role="img" width="1em" height="1em"><path d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"></path></svg></span></span></button></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="become_user"><span class="pf-v6-c-form__label-text">Become User</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><span class="pf-v6-c-form-control"><input id="become_user" name="become_user" type="text" aria-invalid="false" placeholder="Enter become user (optional)" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="become_user" value=""></span></div></div><div class="pf-v6-c-form__group"><div class="pf-v6-c-form__group-label"><label class="pf-v6-c-form__label" for="become_password"><span class="pf-v6-c-form__label-text">Become Password</span></label>&nbsp;&nbsp;</div><div class="pf-v6-c-form__group-control"><div class="pf-v6-c-input-group"><div class="pf-v6-c-input-group__item pf-m-fill"><span class="pf-v6-c-form-control"><input id="become_password" name="become_password" type="password" aria-invalid="false" placeholder="Enter become password (optional)" data-ouia-component-type="PF6/TextInput" data-ouia-safe="true" data-ouia-component-id="become_password" value=""></span></div></div></div></div><div class="pf-v6-c-form__group pf-m-action"><div class="pf-v6-c-form__group-control"><div class="pf-v6-c-form__actions"><button class="pf-v6-c-button pf-m-primary" type="button" data-ouia-component-type="PF6/Button" data-ouia-safe="true" data-ouia-component-id="OUIA-Generated-Button-primary-9"><span class="pf-v6-c-button__text">Save</span></button><button class="pf-v6-c-button pf-m-link" type="button" data-ouia-component-type="PF6/Button" data-ouia-safe="true" data-ouia-component-id="OUIA-Generated-Button-link-9"><span class="pf-v6-c-button__text">Cancel</span></button></div></div></div></form>"`;

exports[`getCleanedFormData should clean formData correctly for different authTypes: SSH Key" auth cleanedData " 1`] = `
{
  "auth_token": "test_token",
  "name": "Test Credential",
  "ssh_key": "test_ssh_key",
  "ssh_passphrase": "test_passphrase",
  "username": "test_user",
}
`;

exports[`getCleanedFormData should clean formData correctly for different authTypes: Token" auth cleanedData " 1`] = `
{
  "auth_token": "test_token",
  "name": "Test Credential",
  "ssh_key": "test_ssh_key",
  "ssh_passphrase": "test_passphrase",
  "username": "",
}
`;

exports[`getCleanedFormData should clean formData correctly for different authTypes: Username and Password" auth cleanedData " 1`] = `
{
  "name": "Test Credential",
  "password": "test_password",
  "username": "test_user",
}
`;

exports[`useCredentialForm should allow editing a credential: formData, edit 1`] = `
{
  "auth_token": "",
  "become_method": "",
  "become_password": "",
  "become_user": "",
  "name": "lorem",
  "password": "",
  "ssh_key": "",
  "ssh_passphrase": "",
  "username": "",
}
`;

exports[`useCredentialForm should derive token auth for specific credential types: token auth 1`] = `
{
  "openshift": "Token",
  "rhacs": "Token",
}
`;

exports[`useCredentialForm should derive username + password for specific credential types: username and password 1`] = `
{
  "ansible": "Username and Password",
  "network": "Username and Password",
  "satellite": "Username and Password",
  "vcenter": "Username and Password",
}
`;

exports[`useCredentialForm should initialize formData correctly: formData 1`] = `
{
  "auth_token": "",
  "authenticationType": "",
  "become_method": "",
  "become_password": "",
  "become_user": "",
  "name": "",
  "password": "",
  "ssh_key": "",
  "ssh_passphrase": "",
  "username": "",
}
`;

exports[`useCredentialForm should support implausible case of credential without a name: formData no name, edit 1`] = `
{
  "auth_token": "",
  "become_method": "",
  "become_password": "",
  "become_user": "",
  "name": "",
  "password": "",
  "ssh_key": "",
  "ssh_passphrase": "",
  "username": "",
}
`;

exports[`useCredentialForm should work without formData: emptyFormData 1`] = `
{
  "auth_token": "",
  "authenticationType": "",
  "become_method": "",
  "become_password": "",
  "become_user": "",
  "name": "",
  "password": "",
  "ssh_key": "",
  "ssh_passphrase": "",
  "username": "",
}
`;
