// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddCredentialModal should call onSubmit with the correct filtered data when "Save" is clicked: onSubmit, filtered data 1`] = `
[
  [
    {
      "authenticationType": "",
      "become_method": "",
      "become_user": "",
      "cred_type": "network",
      "name": "Test Credential",
      "username": "",
    },
  ],
]
`;

exports[`AddCredentialModal should have the correct title: AddCredentialModal Title 1`] = `
<span
  class="pf-v5-c-modal-box__title-text"
>
  Add credential: network
</span>
`;

exports[`AddCredentialModal should render a basic component: basic 1`] = `
<Modal
  actions={[]}
  appendTo={[Function]}
  aria-describedby=""
  aria-label=""
  aria-labelledby=""
  className=""
  hasNoBodyWrapper={false}
  isOpen={true}
  onClose={[Function]}
  ouiaSafe={true}
  position="default"
  showClose={true}
  title="Add credential: "
  titleIconVariant={null}
  titleLabel=""
  variant="small"
>
  <CredentialForm
    onClose={[Function]}
    onSubmit={[Function]}
  />
</Modal>
`;

exports[`CredentialForm should call handlers for setAuthType and handleInputChange: handleInputChange 1`] = `
[
  [
    "become_method",
    "sudo",
  ],
]
`;

exports[`CredentialForm should call handlers for setAuthType and handleInputChange: setAuthType 1`] = `
[
  [
    "SSH Key",
  ],
]
`;

exports[`CredentialForm should render a basic component: basic 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      value=""
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
        value=""
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
        value=""
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render form to different cred types appropriately: ansible, "Username and Password" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      value=""
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
        value=""
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
        value=""
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render form to different cred types appropriately: satellite, "Username and Password" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      value=""
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
        value=""
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
        value=""
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render form to different cred types appropriately: vcenter, "Username and Password" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      value=""
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
        value=""
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
        value=""
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render form to rhacs appropriately: rhacs, "Token" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
      value=""
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_token"
    isRequired={true}
    label="Token"
  >
    <TextInput
      id="credential-token"
      isRequired={true}
      name="auth_token"
      onChange={[Function]}
      ouiaId="auth_token"
      placeholder="Enter Token"
      type="text"
      value=""
    />
  </FormGroup>
  <ActionGroup>
    <Button
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render specific to authType for type network: network, SSH Key 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
      />
    </FormGroup>
    <FormGroup
      fieldId="ssh_key"
      isRequired={true}
      label="SSH Key"
    >
      <TextArea
        data-ouia-component-id="ssh_key"
        id="credential-ssh-key"
        isRequired={true}
        name="ssh_key"
        onChange={[Function]}
        placeholder="Enter private SSH Key"
        rows={10}
      />
      <FormHelperText>
        Please paste your private SSH key here. This key will be used to authenticate your access to the system.
      </FormHelperText>
    </FormGroup>
    <FormGroup
      fieldId="ssh_passphrase"
      label="SSH passphrase"
    >
      <TextInput
        id="ssh_passphrase"
        name="ssh_passphrase"
        onChange={[Function]}
        ouiaId="ssh_passphrase"
        placeholder="Enter SSH passphrase (optional)"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render specific to authType for type network: network, Username and Password 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render specific to authType for type openshift: openshift, "Token" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_token"
    isRequired={true}
    label="Token"
  >
    <TextInput
      id="credential-token"
      isRequired={true}
      name="auth_token"
      onChange={[Function]}
      ouiaId="auth_token"
      placeholder="Enter Token"
      type="text"
    />
  </FormGroup>
  <ActionGroup>
    <Button
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`CredentialForm should render specific to authType for type openshift: openshift, "Username and Password" 1`] = `
<Form>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
  <ActionGroup>
    <Button
      onClick={[Function]}
      variant="primary"
    >
      Save
    </Button>
    <Button
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </Button>
  </ActionGroup>
</Form>
`;

exports[`getCleanedFormData should clean formData correctly for different authTypes: SSH Key" auth cleanedData " 1`] = `
{
  "auth_token": "test_token",
  "name": "Test Credential",
  "ssh_key": "test_ssh_key",
  "ssh_passphrase": "test_passphrase",
  "username": "test_user",
}
`;

exports[`getCleanedFormData should clean formData correctly for different authTypes: Token" auth cleanedData " 1`] = `
{
  "auth_token": "test_token",
  "name": "Test Credential",
  "ssh_key": "test_ssh_key",
  "ssh_passphrase": "test_passphrase",
  "username": "",
}
`;

exports[`getCleanedFormData should clean formData correctly for different authTypes: Username and Password" auth cleanedData " 1`] = `
{
  "name": "Test Credential",
  "password": "test_password",
  "username": "test_user",
}
`;

exports[`useCredentialForm should allow editing a credential: formData, edit 1`] = `
{
  "auth_token": "",
  "become_method": "",
  "become_password": "",
  "become_user": "",
  "name": "lorem",
  "password": "",
  "ssh_key": "",
  "ssh_passphrase": "",
  "username": "",
}
`;

exports[`useCredentialForm should derive token auth for specific credential types: token auth 1`] = `
{
  "openshift": "Token",
  "rhacs": "Token",
}
`;

exports[`useCredentialForm should derive username + password for specific credential types: username and password 1`] = `
{
  "ansible": "Username and Password",
  "network": "Username and Password",
  "satellite": "Username and Password",
  "vcenter": "Username and Password",
}
`;

exports[`useCredentialForm should initialize formData correctly: formData 1`] = `
{
  "auth_token": "",
  "authenticationType": "",
  "become_method": "",
  "become_password": "",
  "become_user": "",
  "name": "",
  "password": "",
  "ssh_key": "",
  "ssh_passphrase": "",
  "username": "",
}
`;
